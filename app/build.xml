<?xml version="1.0" encoding="UTF-8"?>
<!--
 * Copyright (C) 2011 Dmitry Skiba
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
-->

<project name="App" default="help">

    <property name="target" value="android-9" />

    <!-- Custom Android task to deal with the project target, and import the
         proper rules.
         This requires ant 1.6.0 or above. -->
    <path id="android.antlibs">
        <pathelement path="${sdk.dir}/tools/lib/anttasks.jar" />
        <pathelement path="${sdk.dir}/tools/lib/sdklib.jar" />
        <pathelement path="${sdk.dir}/tools/lib/androidprefs.jar" />
    </path>

    <taskdef name="setup"
        classname="com.android.ant.SetupTask"
        classpathref="android.antlibs" />

    <setup import="false"/>

<!-- ============================================================================= -->

    <!-- Custom tasks -->
    <taskdef name="aapt"
        classname="com.android.ant.AaptExecLoopTask"
        classpathref="android.antlibs" />

    <taskdef name="aidl"
        classname="com.android.ant.AidlExecTask"
        classpathref="android.antlibs" />

    <taskdef name="apkbuilder"
        classname="com.android.ant.ApkBuilderTask"
        classpathref="android.antlibs" />

    <taskdef name="xpath"
        classname="com.android.ant.XPathTask"
        classpathref="android.antlibs" />

    <taskdef name="if"
        classname="com.android.ant.IfElseTask"
        classpathref="android.antlibs" />

    <!-- Properties -->

    <!-- Tells adb which device to target. You can change this from the command line
         by invoking "ant -Dadb.device.arg=-d" for device "ant -Dadb.device.arg=-e" for
         the emulator. -->
    <property name="adb.device.arg" value="" />

    <property name="android.tools.dir" location="${sdk.dir}/tools" />
    <property name="android.platform.tools.dir" location="${sdk.dir}/platform-tools" />
    
    <!-- Name of the application package extracted from manifest file -->
    <xpath input="AndroidManifest.xml" expression="/manifest/@package"
                output="manifest.package" />
    
    <!-- Value of the hasCode attribute (Application node) extracted from manifest file -->
    <xpath input="AndroidManifest.xml" expression="/manifest/application/@android:hasCode"
                output="manifest.hasCode" default="true"/>

    <!-- Input directories -->
    <property name="source.dir" value="src" />
    <property name="source.absolute.dir" location="${source.dir}" />
    <property name="gen.dir" value="gen" />
    <property name="gen.absolute.dir" location="${gen.dir}" />
    <property name="resource.dir" value="res" />
    <property name="resource.absolute.dir" location="${resource.dir}" />
    <property name="asset.dir" value="assets" />
    <property name="asset.absolute.dir" location="${asset.dir}" />

    <!-- Directory for the third party java libraries -->
    <property name="jar.libs.dir" value="libs" />
    <property name="jar.libs.absolute.dir" location="${jar.libs.dir}" />
    <!-- create a path with all the jar files, from the main project and the
         libraries -->
    <path id="jar.libs.ref">
        <fileset dir="${jar.libs.absolute.dir}" includes="*.jar" />
        <path refid="project.libraries.jars" />
    </path>

    <!-- Directory for the native libraries -->
    <property name="native.libs.dir" value="libs" />
    <property name="native.libs.absolute.dir" location="${native.libs.dir}" />

    <!-- Output directories -->
    <property name="out.dir" value="bin" />
    <property name="out.absolute.dir" location="${out.dir}" />
    <property name="out.classes.dir" value="${out.absolute.dir}/classes" />
    <property name="out.classes.absolute.dir" location="${out.classes.dir}" />

    <!-- Intermediate files -->
    <property name="dex.file.name" value="classes.dex" />
    <property name="intermediate.dex.file"
                  location="${out.absolute.dir}/${dex.file.name}" />
    <property name="resource.package.file.name"
                  value="${ant.project.name}.ap_" />

    <!-- The final package file to generate
         These can be overridden by setting them earlier to
         different values -->
    <property name="out.debug.unaligned.file"
                  location="${out.absolute.dir}/${ant.project.name}-debug-unaligned.apk" />
    <property name="out.debug.file"
                  location="${out.absolute.dir}/app.apk" />

    <property name="out.unsigned.file.name"
                  value="${ant.project.name}-unsigned.apk" />
    <property name="out.unsigned.file"
                  location="${out.absolute.dir}/${out.unsigned.file.name}" />

    <property name="out.unaligned.file.name"
                  value="${ant.project.name}-unaligned.apk" />
    <property name="out.unaligned.file"
                  location="${out.absolute.dir}/${out.unaligned.file.name}" />

    <property name="out.release.file.name"
                  value="app.apk" />
    <property name="out.release.file"
                  location="${out.absolute.dir}/${out.release.file.name}" />

    <!-- set some properties used for filtering/override. If those weren't defined
         before, then this will create them with empty values, which are then ignored
         by the custom tasks receiving them. -->
    <property name="version.code" value="" />
    <property name="aapt.resource.filter" value="" />
    <property name="filter.abi" value="" />

    <!-- compilation options -->
    <property name="java.encoding" value="UTF-8" />
    <property name="java.target" value="1.5" />
    <property name="java.source" value="1.5" />

    <!-- Verbosity -->
    <property name="verbose" value="false" />
    <!-- This is needed to switch verbosity of zipalign. Depends exclusively on 'verbose'
         -->
    <condition property="v.option" value="-v" else="">
        <istrue value="${verbose}" />
    </condition>
    <!-- This is needed to switch verbosity of dx. Depends exclusively on 'verbose' -->
    <condition property="verbose.option" value="--verbose" else="">
        <istrue value="${verbose}" />
    </condition>

    <!-- properties for signing in release mode -->
    <condition property="has.keystore">
        <and>
            <isset property="key.store" />
            <length string="${key.store}" when="greater" length="0" />
            <isset property="key.alias" />
        </and>
    </condition>
    <condition property="has.password">
        <and>
            <isset property="has.keystore" />
            <isset property="key.store.password" />
            <isset property="key.alias.password" />
        </and>
    </condition>

    <!-- Tools -->
    <condition property="exe" value=".exe" else=""><os family="windows" /></condition>
    <property name="adb" location="${android.platform.tools.dir}/adb${exe}" />
    <property name="zipalign" location="${android.tools.dir}/zipalign${exe}" />

    <!-- Macros -->

    <!-- Configurable macro, which allows to pass as parameters output directory,
         output dex filename and external libraries to dex (optional) -->
    <macrodef name="dex-helper">
        <element name="external-libs" optional="yes" />
        <element name="extra-parameters" optional="yes" />
        <sequential>
            <!-- sets the primary input for dex. If a pre-dex task sets it to
                 something else this has no effect -->
            <property name="out.dex.input.absolute.dir" value="${out.classes.absolute.dir}" />

            <!-- set the secondary dx input: the project (and library) jar files
                 If a pre-dex task sets it to something else this has no effect -->
            <if>
                <condition>
                    <isreference refid="out.dex.jar.input.ref" />
                </condition>
                <else>
                    <path id="out.dex.jar.input.ref">
                        <path refid="jar.libs.ref" />
                    </path>
                </else>
            </if>

            <echo>Converting compiled files and external libraries into ${intermediate.dex.file}...</echo>
            <apply executable="${dx}" failonerror="true" parallel="true">
                <arg value="--dex" />
                <arg value="--output=${intermediate.dex.file}" />
                <extra-parameters />
                <arg line="${verbose.option}" />
                <arg path="${out.dex.input.absolute.dir}" />
                <path refid="out.dex.jar.input.ref" />
                <external-libs />
            </apply>
        </sequential>
    </macrodef>

    <!-- This is macro that enable passing variable list of external jar files to ApkBuilder
         Example of use:
         <package-helper output.filepath="/path/to/foo.apk">
             <extra-jars>
                <jarfolder path="my_jars" />
                <jarfile path="foo/bar.jar" />
                <jarfolder path="your_jars" />
             </extra-jars>
         </package-helper> -->
    <macrodef name="package-helper">
        <attribute name="output.filepath" />
        <element name="extra-jars" optional="yes" />
        <sequential>
            <apkbuilder
                    outfolder="${out.absolute.dir}"
                    resourcefile="${resource.package.file.name}"
                    apkfilepath="@{output.filepath}"
                    debugpackaging="${build.packaging.debug}"
                    debugsigning="${build.signing.debug}"
                    abifilter="${filter.abi}"
                    verbose="${verbose}"
                    hascode="${manifest.hasCode}">
                <dex path="${intermediate.dex.file}"/>
                <sourcefolder path="${source.absolute.dir}"/>
                <jarfolder path="${jar.libs.absolute.dir}" />
                <jarfolder refid="project.libraries.libs" />
                <nativefolder path="${native.libs.absolute.dir}" />
                <nativefolder refid="project.libraries.libs" />
                <extra-jars/>
            </apkbuilder>
        </sequential>
    </macrodef>

    <!-- This is macro which zipaligns in.package and outputs it to out.package. Used by targets
         debug and release.-->
    <macrodef name="zipalign-helper">
        <attribute name="in.package" />
        <attribute name="out.package" />
        <sequential>
            <echo>Running zip align on final apk...</echo>
            <exec executable="${zipalign}" failonerror="true">
                <arg line="${v.option}" />
                <arg value="-f" />
                <arg value="4" />
                <arg path="@{in.package}" />
                <arg path="@{out.package}" />
            </exec>
        </sequential>
    </macrodef>

    <!-- This is macro used in -install. -->
    <macrodef name="install-helper">
        <sequential>
            <echo>Installing ${out.debug.file} onto default emulator or device...</echo>
            <exec executable="${adb}" failonerror="true">
                <arg line="${adb.device.arg}" />
                <arg value="install" />
                <arg value="-r" />
                <arg path="${out.debug.file}" />
            </exec>
        </sequential>
    </macrodef>

    <!-- Rules -->

    <!-- Creates the output directories if they don't exist yet. -->
    <target name="-dirs">
        <echo>Creating output directories if needed...</echo>
        <mkdir dir="${resource.absolute.dir}" />
        <mkdir dir="${jar.libs.absolute.dir}" />
        <mkdir dir="${out.absolute.dir}" />
        <if condition="${manifest.hasCode}">
            <then>
                <mkdir dir="${gen.absolute.dir}" />
                <mkdir dir="${out.classes.absolute.dir}" />
            </then>
        </if>
    </target>

    <!-- Generates the R.java file for this project's resources. -->
    <target name="-resource-src" depends="-dirs">
        <if condition="${manifest.hasCode}">
            <then>
                <echo>Generating R.java / Manifest.java from the resources...</echo>
                <aapt executable="${aapt}"
                        command="package"
                        verbose="${verbose}"
                        manifest="AndroidManifest.xml"
                        androidjar="${android.jar}"
                        rfolder="${gen.absolute.dir}">
                    <res path="${resource.absolute.dir}" />
                </aapt>
            </then>
            <else>
                <echo>hasCode = false. Skipping...</echo>
            </else>
        </if>
    </target>

    <!-- Generates java classes from .aidl files. -->
    <target name="-aidl" depends="-dirs">
        <if condition="${manifest.hasCode}">
            <then>
                <echo>Compiling aidl files into Java classes...</echo>
                <aidl executable="${aidl}" framework="${android.aidl}"
                        genFolder="${gen.absolute.dir}">
                    <source path="${source.absolute.dir}"/>
                </aidl>
            </then>
            <else>
                <echo>hasCode = false. Skipping...</echo>
            </else>
        </if>
    </target>

    <!-- Compiles this project's .java files into .class files. -->
    <target name="compile" depends="-resource-src, -aidl"
                description="Compiles project's .java files into .class files">
        <if condition="${manifest.hasCode}">
            <then>
                <!-- If android rules are used for a test project, its classpath should include
                     tested project's location -->
                <condition property="extensible.classpath"
                        value="${tested.project.absolute.dir}/bin/classes"
                        else=".">
                    <isset property="tested.project.absolute.dir" />
                </condition>
                <condition property="extensible.libs.classpath"
                        value="${tested.project.absolute.dir}/libs"
                        else="${jar.libs.dir}">
                    <isset property="tested.project.absolute.dir" />
                </condition>
                <javac encoding="${java.encoding}"
                        source="${java.source}" target="${java.target}"
                        debug="true" extdirs=""
                        destdir="${out.classes.absolute.dir}"
                        bootclasspathref="android.target.classpath"
                        verbose="${verbose}"
                        includeAntRuntime="false"
                        classpath="${extensible.classpath}"
                        classpathref="jar.libs.ref">
                    <src path="${source.absolute.dir}" />
                    <src path="${gen.absolute.dir}" />
                    <classpath>
                        <fileset dir="${extensible.libs.classpath}" includes="*.jar" />
                    </classpath>
                </javac>
            </then>
            <else>
                <echo>hasCode = false. Skipping...</echo>
            </else>
        </if>
    </target>

    <!-- Converts this project's .class files into .dex files -->
    <target name="-dex" depends="compile"
            unless="do.not.compile">
        <if condition="${manifest.hasCode}">
            <then>
                <dex-helper />
            </then>
            <else>
                <echo>hasCode = false. Skipping...</echo>
            </else>
        </if>
    </target>

    <!-- Puts the project's resources into the output package file
         This actually can create multiple resource package in case
         Some custom apk with specific configuration have been
         declared in default.properties.
         -->
    <target name="-package-resources">
        <echo>Packaging resources</echo>
        <aapt executable="${aapt}"
                command="package"
                versioncode="${version.code}"
                debug="${build.packaging.debug}"
                manifest="AndroidManifest.xml"
                assets="${asset.absolute.dir}"
                androidjar="${android.jar}"
                apkfolder="${out.absolute.dir}"
                resourcefilename="${resource.package.file.name}"
                resourcefilter="${aapt.resource.filter}">
            <res path="${resource.absolute.dir}" />
            <!-- <nocompress /> forces no compression on any files in assets or res/raw -->
            <!-- <nocompress extension="xml" /> forces no compression on specific file extensions in assets and res/raw -->
        </aapt>
    </target>

    <!-- Packages the application and sign it with a debug key. -->
    <target name="-package-debug-sign" depends="-dex, -package-resources">
        <package-helper
                output.filepath="${out.debug.unaligned.file}" />
    </target>

    <!-- Packages the application without signing it. -->
    <target name="-package-release" depends="-dex, -package-resources">
        <package-helper
                output.filepath="${out.unsigned.file}"/>
    </target>

    <target name="-compile-tested-if-test" if="tested.project.dir" unless="do.not.compile.again">
       <subant target="compile">
            <fileset dir="${tested.project.absolute.dir}" includes="build.xml" />
       </subant>
    </target>

    <target name="-set-debug-mode" >
        <!-- property only set in debug mode.
             Useful for if/unless attributes in target node
             when using Ant before 1.8 -->
        <property name="build.mode.debug" value="true"/>

        <!-- whether the build is a debug build. always set. -->
        <property name="build.packaging.debug" value="true" />

        <!-- signing mode: debug -->
        <property name="build.signing.debug" value="true" />

    </target>

    <!-- Builds debug output package, provided all the necessary files are already dexed -->
    <target name="debug" depends="-set-debug-mode, -compile-tested-if-test, -package-debug-sign"
                description="Builds the application and signs it with a debug key.">
        <zipalign-helper in.package="${out.debug.unaligned.file}"
                                   out.package="${out.debug.file}" />
        <echo>Debug Package: ${out.debug.file}</echo>
    </target>

    <!-- called through target 'release'. Only executed if the keystore and
         key alias are known but not their password. -->
    <target name="-release-prompt-for-password" if="has.keystore" unless="has.password">
        <!-- Gets passwords -->
        <input
                message="Please enter keystore password (store:${key.store}):"
                addproperty="key.store.password" />
        <input
                message="Please enter password for alias '${key.alias}':"
                addproperty="key.alias.password" />
    </target>

    <!-- called through target 'release'. Only executed if there's no
         keystore/key alias set -->
    <target name="-release-nosign" unless="has.keystore">
        <echo>No key.store and key.alias properties found in build.properties.</echo>
        <echo>Please sign ${out.unsigned.file} manually</echo>
        <echo>and run zipalign from the Android SDK tools.</echo>
    </target>

    <target name="-set-release-mode">
        <!-- release mode is only valid if the manifest does not explicitly
             set debuggable to true. default is false.
             We actually store build.packaging.debug, not build.release -->
        <xpath input="AndroidManifest.xml" expression="/manifest/application/@android:debuggable"
                output="build.packaging.debug" default="false"/>

        <!-- signing mode: release -->
        <property name="build.signing.debug" value="false" />

        <if condition="${build.packaging.debug}">
            <then>
                <echo>*************************************************</echo>
                <echo>****  Android Manifest has debuggable=true   ****</echo>
                <echo>**** Doing DEBUG packaging with RELEASE keys ****</echo>
                <echo>*************************************************</echo>
            </then>
            <else>
                <!-- property only set in release mode.
                     Useful for if/unless attributes in target node
                     when using Ant before 1.8 -->
                <property name="build.mode.release" value="true"/>
            </else>
        </if>
    </target>

    <!-- This runs -package-release and -release-nosign first and then runs
         only if release-sign is true (set in -release-check,
         called by -release-no-sign)-->
    <target name="release"
                depends="-set-release-mode, -package-release, -release-prompt-for-password, -release-nosign"
                if="has.keystore"
                description="Builds the application. The generated apk file must be signed before
                            it is published.">
        <!-- Signs the APK -->
        <echo>Signing final apk...</echo>
        <signjar
                jar="${out.unsigned.file}"
                signedjar="${out.unaligned.file}"
                keystore="${key.store}"
                storepass="${key.store.password}"
                alias="${key.alias}"
                keypass="${key.alias.password}"
                verbose="${verbose}" />

        <!-- Zip aligns the APK -->
        <zipalign-helper in.package="${out.unaligned.file}"
                                   out.package="${out.release.file}" />
        <echo>Release Package: ${out.release.file}</echo>
    </target>

    <target name="install" depends="debug"
                description="Installs/reinstalls the debug package onto a running
                            emulator or device. If the application was previously installed,
                            the signatures must match." >
        <install-helper />
    </target>

    <target name="-uninstall-check">
        <condition property="uninstall.run">
           <isset property="manifest.package" />
        </condition>
    </target>

    <target name="-uninstall-error" depends="-uninstall-check" unless="uninstall.run">
        <echo>Unable to run 'ant uninstall', manifest.package property is not defined.
        </echo>
    </target>

    <!-- Uninstalls the package from the default emulator/device -->
    <target name="uninstall" depends="-uninstall-error" if="uninstall.run"
                description="Uninstalls the application from a running emulator or device.">
        <echo>Uninstalling ${manifest.package} from the default emulator or device...</echo>
        <exec executable="${adb}" failonerror="true">
            <arg line="${adb.device.arg}" />
            <arg value="uninstall" />
            <arg value="${manifest.package}" />
        </exec>
    </target>

    <target name="clean" description="Removes output files created by other targets.">
        <delete dir="${out.absolute.dir}" verbose="${verbose}" />
        <delete dir="${gen.absolute.dir}" verbose="${verbose}" />
    </target>

    <target name="help">
        <!-- displays starts at col 13
              |13                                                              80| -->
        <echo>Android Ant Build. Available targets:</echo>
        <echo>   help:      Displays this help.</echo>
        <echo>   clean:     Removes output files created by other targets.</echo>
        <echo>   compile:   Compiles project's .java files into .class files.</echo>
        <echo>   debug:     Builds the application and signs it with a debug key.</echo>
        <echo>   release:   Builds the application. The generated apk file must be</echo>
        <echo>              signed before it is published.</echo>
        <echo>   install:   Installs/reinstalls the debug package onto a running</echo>
        <echo>              emulator or device.</echo>
        <echo>              If the application was previously installed, the</echo>
        <echo>              signatures must match.</echo>
        <echo>   uninstall: Uninstalls the application from a running emulator or</echo>
        <echo>              device.</echo>
    </target>
</project>
